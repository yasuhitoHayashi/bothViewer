
import argparse
import os
import threading
import time
import io
from datetime import datetime
import subprocess
import queue

import cv2
import numpy as np
from PIL import Image
from flask import Flask, Response, request, jsonify

# global_process.py の createMp4Process を利用（ffmpegによる録画処理）
from global_process import createMp4Process
# global_calc.py はライセンス上問題なく利用可能
import global_calc as g_calc
# 設定ファイル管理モジュール
from config_manager import load_config, save_config, save_config_snapshot

#######################################
# グローバル変数保持用クラス（ROI計算結果等）
#######################################
class GValue:
    def __init__(self):
        self.img_trim_width = 0
        self.img_trim_height = 0
        self.img_trim_offset_x = 0
        self.img_trim_offset_y = 0
        self.write_frame_id_x = 0
        self.write_frame_id_y = 0

g_value = GValue()

#######################################
# 設定ファイルからパラメータ読み込み
#######################################
config_data = load_config()

# フレームカメラ設定
frame_config = config_data["bothViewHW"]["frameCamHW"]
FRAME_RESOLUTION_W = int(frame_config["resolution"][0])
FRAME_RESOLUTION_H = int(frame_config["resolution"][1])
FRAME_PIXCEL_W = float(frame_config["pixel"]["width"])
FRAME_PIXCEL_H = float(frame_config["pixel"]["height"])

# イベントカメラ設定
event_config = config_data["bothViewHW"]["eventCamHW"]
EVENT_RESOLUTION_W = int(event_config["resolution"][0])
EVENT_RESOLUTION_H = int(event_config["resolution"][1])
EVENT_PIXCEL_W = float(event_config["pixel"]["width"])
EVENT_PIXCEL_H = float(event_config["pixel"]["height"])

FRAME_QUEUE_SIZE = 10

# ROI 調整用パラメータ（両view_main と同じ値を想定）
adjust_view = frame_config["frame_shift"]
ADJUST_VIEW_W = int(adjust_view["width"])
ADJUST_VIEW_H = int(adjust_view["height"])

#######################################
# CameraThread: カメラからフレームを取得
#######################################
class CameraThread(threading.Thread):
    def __init__(self, frame_queue: 'queue.Queue'):
        super().__init__()
        self.frame_queue = frame_queue
        self.running = True
        self.external_callback = None
        self.cam = None  # カメラインスタンスの保持

    def run(self):
        from vmbpy import VmbSystem, Frame, FrameStatus
        vmb = VmbSystem.get_instance()
        with vmb:
            cams = vmb.get_all_cameras()
            if not cams:
                print("フレームカメラが見つかりませんでした。")
                return
            cam = cams[0]
            with cam:
                self.cam = cam
                # カメラの基本設定
                cam.LineMode.set('Output')
                cam.LineSource.set('ExposureActive')
                cam.TriggerSource.set('Line0')
                cam.LineInverter.set(True)
                print("トリガアウト設定完了")

                # --- global_calc.py を利用したセンサーサイズ・ROI計算 ---
                # センサーサイズ計算（単位はマイクロメートル）
                frame_sensor = g_calc.get_cencer_size((FRAME_RESOLUTION_W, FRAME_RESOLUTION_H),
                                                      (FRAME_PIXCEL_W, FRAME_PIXCEL_H))
                event_sensor = g_calc.get_cencer_size((EVENT_RESOLUTION_W, EVENT_RESOLUTION_H),
                                                      (EVENT_PIXCEL_W, EVENT_PIXCEL_H))
                # トリム量の計算
                trim_w, trim_h = g_calc.get_trim_pixel_size(
                    (FRAME_RESOLUTION_W, FRAME_RESOLUTION_H),
                    (EVENT_RESOLUTION_W, EVENT_RESOLUTION_H),
                    frame_sensor,
                    event_sensor
                )
                # ROIサイズの計算
                roi_width = FRAME_RESOLUTION_W - (trim_w * 2)
                roi_height = FRAME_RESOLUTION_H - (trim_h * 2)
                # 微調整：bothview_main と同じ調整（例：4px、2px間隔）
                (roi_width, roi_height), (trim_w, trim_h) = g_calc.get_adjusted_roi((roi_width, roi_height), (trim_w, trim_h))
                # 調整オフセット
                adjust_w, adjust_h = ADJUST_VIEW_W, ADJUST_VIEW_H
                final_offset_x = int(trim_w - g_calc.get_adjusted_offset(adjust_w))
                final_offset_y = int(trim_h + g_calc.get_adjusted_offset(adjust_h))
                # 結果をグローバル変数へセット
                g_value.img_trim_width  = roi_width
                g_value.img_trim_height = roi_height
                g_value.img_trim_offset_x = final_offset_x
                g_value.img_trim_offset_y = final_offset_y
                g_value.write_frame_id_x = 40 + final_offset_x
                g_value.write_frame_id_y = 60 + final_offset_y
                print("センサーサイズとROI計算完了:")
                print("  ROIサイズ:", (roi_width, roi_height))
                print("  切り出し開始位置:", (final_offset_x, final_offset_y))
                # ---------------------------------------------------------

                cam.start_streaming(self.frame_callback)
                while self.running:
                    time.sleep(0.01)
                cam.stop_streaming()

    def frame_callback(self, cam, stream, frame):
        from vmbpy import FrameStatus
        if frame.get_status() == FrameStatus.Complete:
            try:
                frame_np = frame.as_opencv_image()
            except ValueError as e:
                if "Rgb8" in str(e):
                    h = frame.get_height()
                    w = frame.get_width()
                    frame_np = np.frombuffer(frame.get_buffer(), dtype=np.uint8).reshape((h, w, 3))
                    frame_np = cv2.cvtColor(frame_np, cv2.COLOR_RGB2BGR)
                else:
                    return
            try:
                self.frame_queue.put_nowait(frame_np)
            except queue.Full:
                pass
            if self.external_callback:
                try:
                    self.external_callback(frame_np)
                except Exception as e:
                    print("外部コールバックエラー:", e)
        try:
            cam.queue_frame(frame)
        except Exception as e:
            print("Error re-queuing frame:", e)

    def stop(self):
        self.running = False

#######################################
# FrameStreamer クラス
#######################################
class FrameStreamer:
    def __init__(self, save_location, display_factor=0.5):
        self.save_location = save_location
        self.save_filename = ""  # 録画ファイル名のプレフィックス
        self.latest_frame = None  # Web配信用最新フレーム（PIL形式）
        self.recording = False
        self.ffmpeg_process = None  # ffmpeg録画用プロセス

        # フレーム取得用キューとカメラスレッドの開始
        self.frame_queue = queue.Queue(maxsize=FRAME_QUEUE_SIZE)
        self.cam_thread = CameraThread(self.frame_queue)
        self.cam_thread.external_callback = self.update_latest_frame
        self.cam_thread.start()

    def update_latest_frame(self, frame_np):
        try:
            # ROI領域が設定されていれば、その部分を切り出す
            if g_value.img_trim_width > 0 and g_value.img_trim_height > 0:
                x = g_value.img_trim_offset_x
                y = g_value.img_trim_offset_y
                w = g_value.img_trim_width
                h = g_value.img_trim_height
                cropped_frame_np = frame_np[y:y+h, x:x+w]
            else:
                cropped_frame_np = frame_np

            # 最新フレームを保持（Web配信用：PIL画像に変換）
            pil_image = Image.fromarray(cv2.cvtColor(cropped_frame_np, cv2.COLOR_BGR2RGB))
            self.latest_frame = pil_image.copy()

            # 録画中ならば ffmpeg プロセスにフレームデータを送信
            if self.recording and self.ffmpeg_process is not None:
                try:
                    self.ffmpeg_process.stdin.write(cropped_frame_np.tobytes())
                except Exception as e:
                    print("ffmpeg 書き込みエラー:", e)
        except Exception as e:
            print("フレーム変換エラー:", e)

    def start_recording(self, frame_using_gpu=False, bitrate=-1):
        if not self.recording:
            # 録画ファイル名をタイムスタンプ＋プレフィックスで作成
            now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            recording_name = f"{now}_{self.save_filename}" if self.save_filename else now
            # global_process.createMp4Process を利用して ffmpeg プロセス生成
            # 入力サイズは元のフレームサイズ、crop_trim は (offset_x, offset_y, width, height)
            crop_trim = (g_value.img_trim_offset_x, g_value.img_trim_offset_y, g_value.img_trim_width, g_value.img_trim_height)
            self.ffmpeg_process = createMp4Process(FRAME_RESOLUTION_W, FRAME_RESOLUTION_H,
                                                   recording_name, crop_trim, frame_using_gpu, bitrate)
            self.recording = True
            print("Frame録画開始:", recording_name)
            return True
        print("既に録画中です。")
        return False

    def stop_recording(self):
        if self.recording and self.ffmpeg_process is not None:
            try:
                self.ffmpeg_process.stdin.close()
                self.ffmpeg_process.wait()
            except Exception as e:
                print("ffmpeg プロセス終了エラー:", e)
            self.ffmpeg_process = None
            self.recording = False
            print("Frame録画停止。")
            return True
        print("録画していません。")
        return False

    def update_save_settings(self, save_location, save_filename):
        self.save_location = save_location
        self.save_filename = save_filename
        print(f"保存設定更新: 保存先={self.save_location}, プレフィックス={self.save_filename}")
        return True

    def shutdown(self):
        self.cam_thread.stop()
        self.cam_thread.join()

#######################################
# Flask API 定義（Web制御部分）
#######################################
app = Flask(__name__)

@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response

@app.route('/video_feed')
def video_feed():
    def generate():
        while True:
            if frame_streamer_instance and frame_streamer_instance.latest_frame:
                buf = io.BytesIO()
                frame_streamer_instance.latest_frame.save(buf, format='JPEG')
                frame_data = buf.getvalue()
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_data + b'\r\n')
            time.sleep(0.05)
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/set_save', methods=['POST'])
def set_save():
    data = request.get_json()
    save_location = data.get('save_location')
    save_filename = data.get('save_filename')
    if save_location is None:
        return jsonify({"status": "error", "message": "保存先が指定されていません。"}), 400
    frame_streamer_instance.update_save_settings(save_location, save_filename)
    return jsonify({"status": "success", "message": "保存設定を更新しました。"})

@app.route('/start_recording', methods=['POST'])
def start_recording():
    data = request.get_json() or {}
    frame_using_gpu = data.get("frame_using_gpu", False)
    bitrate = data.get("bitrate", -1)
    success = frame_streamer_instance.start_recording(frame_using_gpu, bitrate)
    return jsonify({"status": "success" if success else "error", "message": "録画開始。"})

@app.route('/stop_recording', methods=['POST'])
def stop_recording():
    success = frame_streamer_instance.stop_recording()
    return jsonify({"status": "success" if success else "error", "message": "録画停止。"})

#######################################
# メイン処理
#######################################
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Frame Streamer (Web 制御版)")
    parser.add_argument('--save_location', dest='save_location', default=os.getcwd(),
                        help="録画ファイルの保存先ディレクトリ")
    parser.add_argument('--port', dest='port', type=int, default=5002,
                        help="Flask サーバーのポート番号")
    args = parser.parse_args()

    frame_streamer_instance = FrameStreamer(args.save_location)
    flask_thread = threading.Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': args.port, 'debug': False}, daemon=True)
    flask_thread.start()

    print("Frame Streamer 起動中。CTRL+C で終了します。")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("シャットダウン中...")
        frame_streamer_instance.shutdown()